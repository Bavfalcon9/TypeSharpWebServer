use std::{ http, fs, path };
use typesharp::TSML;

function main(): void {
     const markupLangServer = new TSML.Server();
     const httpServer = new http.Server({
          socketAddr: [ "127.0.01", 8080 ]
     });

     let server: http.Server = httpServer.serve();

     if (server.err) {
          print("Error in server thread: " + server.err.asString());
     }

     async function markupServer(): Future<void> {
          markupLangServer.bind(httpServer);
          markupLangServer.useFolder('./tsml');

          for (const request of markupLangServer) {
               // route
               if (request.isMessage()) {
                    request.respond("Hi!");
                    continue;
               }

               if (request.path === "/") {
                    request.render('home'); // this can throw an error if Home.tsml is not found!
               } else if (path.exists("./" + request.path)) {
                    if (path.resolve("./" + request.path).split('/')[0] !== "TypeSharpWebServer") {
                         // check if not in local directory
                         request.render('404', { fileName: request.path });
                    } else {
                         // ok
                         request.render(TSML.template('[p] { "Exists!" }'));
                    }
               } else {
                    request.render('404', { fileName: request.path });
               }
          }
     }

     markupServer();
}